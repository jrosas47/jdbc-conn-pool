package com.datastax.drivers.jdbc.pool.cassandra.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.Statement;

import com.datastax.drivers.jdbc.pool.cassandra.connection.HConnectionManager;
import com.datastax.drivers.jdbc.pool.cassandra.service.FailoverPolicy;
import com.datastax.drivers.jdbc.pool.cassandra.service.Operation;
import com.datastax.drivers.jdbc.pool.cassandra.service.OperationType;


/**
 * Wrapper around JDBC Statement.
 */
public class CassandraStatementHandle implements Statement {

  public FailoverPolicy failoverPolicy = FailoverPolicy.ON_FAIL_TRY_ALL_AVAILABLE;
  
  private Statement internalStatement;
  private HConnectionManager manager;
  public CassandraConnectionHandle cassandraConnectionHandle;
  
  public CassandraStatementHandle(Statement internalStatement, HConnectionManager manager, 
      CassandraConnectionHandle cassandraConnectionHandle) {
    this.internalStatement = internalStatement;
    this.manager = manager;
    this.cassandraConnectionHandle = cassandraConnectionHandle;
  }

  /**
   * Performs the operation on the given cassandra instance.
   */
  public void execute(Operation<?> op) throws SQLException {
    try {
      manager.operateWithFailover(op);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public boolean execute(final String sql) throws SQLException {
    final Statement stm = this.internalStatement;

    Operation<Boolean> op = new Operation<Boolean>(OperationType.CQL, this) {

      @Override
      public Boolean execute(CassandraConnectionHandle connection) throws SQLException {
        return stm.execute(sql);
      }
    };

    execute(op);
    return op.getResult();
  }

  @Override
  public boolean execute(final String sql, final int autoGeneratedKeys) throws SQLException {
    final Statement stm = this.internalStatement;

    Operation<Boolean> op = new Operation<Boolean>(OperationType.CQL, this) {

      @Override
      public Boolean execute(CassandraConnectionHandle connection) throws SQLException {
        return stm.execute(sql, autoGeneratedKeys);
      }
    };

    execute(op);
    return op.getResult();
  }

  @Override
  public boolean execute(final String sql, final int[] columnIndexes) throws SQLException {
    final Statement stm = this.internalStatement;

    Operation<Boolean> op = new Operation<Boolean>(OperationType.CQL, this) {

      @Override
      public Boolean execute(CassandraConnectionHandle connection) throws SQLException {
        return stm.execute(sql, columnIndexes);
      }
    };

    execute(op);
    return op.getResult();
  }

  @Override
  public boolean execute(final String sql, final String[] columnNames) throws SQLException {
    final Statement stm = this.internalStatement;

    Operation<Boolean> op = new Operation<Boolean>(OperationType.CQL, this) {

      @Override
      public Boolean execute(CassandraConnectionHandle connection) throws SQLException {
        return stm.execute(sql, columnNames);
      }
    };

    execute(op);
    return op.getResult();
  }

  @Override
  public int[] executeBatch() throws SQLException {
    throw new SQLFeatureNotSupportedException("the Cassandra implementation does not currently support this batch in Statement");
  }

  @Override
  public ResultSet executeQuery(final String sql) throws SQLException {
    final Statement stm = this.internalStatement;

    Operation<ResultSet> op = new Operation<ResultSet>(OperationType.CQL, this) {

      @Override
      public ResultSet execute(CassandraConnectionHandle connection) throws SQLException {
        return stm.executeQuery(sql);
      }
    };

    execute(op);
    return op.getResult();
  }

  @Override
  public int executeUpdate(final String sql) throws SQLException {
    final Statement stm = this.internalStatement;

    Operation<Integer> op = new Operation<Integer>(OperationType.CQL, this) {

      @Override
      public Integer execute(CassandraConnectionHandle connection) throws SQLException {
        return stm.executeUpdate(sql);
      }
    };

    execute(op);
    return op.getResult();
  }

  @Override
  public int executeUpdate(final String sql, final int autoGeneratedKeys) throws SQLException {
    final Statement stm = this.internalStatement;

    Operation<Integer> op = new Operation<Integer>(OperationType.CQL, this) {

      @Override
      public Integer execute(CassandraConnectionHandle connection) throws SQLException {
        return stm.executeUpdate(sql, autoGeneratedKeys);
      }
    };

    execute(op);
    return op.getResult();
  }

  @Override
  public int executeUpdate(final String sql, final int[] columnIndexes) throws SQLException {
    final Statement stm = this.internalStatement;

    Operation<Integer> op = new Operation<Integer>(OperationType.CQL, this) {

      @Override
      public Integer execute(CassandraConnectionHandle connection) throws SQLException {
        return stm.executeUpdate(sql, columnIndexes);
      }
    };

    execute(op);
    return op.getResult();
  }

  @Override
  public int executeUpdate(final String sql, final String[] columnNames) throws SQLException {
    final Statement stm = this.internalStatement;

    Operation<Integer> op = new Operation<Integer>(OperationType.CQL, this) {

      @Override
      public Integer execute(CassandraConnectionHandle connection) throws SQLException {
        return stm.executeUpdate(sql, columnNames);
      }
    };

    execute(op);
    return op.getResult();
  }


  /**
   * Checks if the connection is (logically) closed and throws an exception if it is.
   * 
   * @throws SQLException
   *             on error
   */
  protected void checkClosed() throws SQLException {
    if (this.cassandraConnectionHandle.isClosed()) {
      throw new SQLException("Connection is closed!");
    }
  }


  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    boolean result = false;
    try{
      result = this.internalStatement.isWrapperFor(iface);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
    return result;
  }

  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    T result = null;
    try{
      result = this.internalStatement.unwrap(iface);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
    return result;
  }

  @Override
  public void addBatch(String sql) throws SQLException {
    checkClosed();
    try{
      this.internalStatement.addBatch(sql);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public void cancel() throws SQLException {
    checkClosed();
    try{
      this.internalStatement.cancel();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public void clearBatch() throws SQLException {
    checkClosed();
    try{
      this.internalStatement.clearBatch();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public void clearWarnings() throws SQLException {
    checkClosed();
    try{
      this.internalStatement.clearWarnings();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public void close() throws SQLException {
    this.internalStatement.close();
  }


  @Override
  public Connection getConnection() throws SQLException {
    checkClosed();
    return this.cassandraConnectionHandle;
  }

  @Override
  public int getFetchDirection() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getFetchDirection();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public int getFetchSize() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getFetchSize();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getGeneratedKeys();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public int getMaxFieldSize() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getMaxFieldSize();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public int getMaxRows() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getMaxRows();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public boolean getMoreResults() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getMoreResults();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public boolean getMoreResults(final int current) throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getMoreResults(current);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public int getQueryTimeout() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getQueryTimeout();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public ResultSet getResultSet() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getResultSet();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public int getResultSetConcurrency() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getResultSetConcurrency();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public int getResultSetHoldability() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getResultSetHoldability();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public int getResultSetType() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getResultSetType();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public int getUpdateCount() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getUpdateCount();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public SQLWarning getWarnings() throws SQLException {
    checkClosed();
    try{
      return this.internalStatement.getWarnings();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public boolean isClosed() throws SQLException {
    return this.internalStatement.isClosed();
  }

  @Override
  public boolean isPoolable() throws SQLException {
    boolean result = false;
    checkClosed();
    try{
      result = this.internalStatement.isPoolable();
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
    return result;
  }

  @Override
  public void setCursorName(String name) throws SQLException {
    checkClosed();
    try{
      this.internalStatement.setCursorName(name);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException {
    checkClosed();
    try{
      this.internalStatement.setEscapeProcessing(enable);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public void setFetchDirection(int direction) throws SQLException {
    checkClosed();
    try{
      this.internalStatement.setFetchDirection(direction);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public void setFetchSize(int rows) throws SQLException {
    checkClosed();
    try{
      this.internalStatement.setFetchSize(rows);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public void setMaxFieldSize(int max) throws SQLException {
    checkClosed();
    try{
      this.internalStatement.setMaxFieldSize(max);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public void setMaxRows(int max) throws SQLException {
    checkClosed();
    try{
      this.internalStatement.setMaxRows(max);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public void setPoolable(boolean poolable) throws SQLException {
    checkClosed();
    try{
      this.internalStatement.setPoolable(poolable);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

  @Override
  public void setQueryTimeout(int seconds) throws SQLException {
    checkClosed();
    try{
      this.internalStatement.setQueryTimeout(seconds);
    } catch (SQLException e) {
      throw this.cassandraConnectionHandle.markPossiblyBroken(e);
    }
  }

}
